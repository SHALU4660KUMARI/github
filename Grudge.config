"internal :house:":
  - gatsby-browser.js
  - gatsby-config.js
  - gatsby-node.js
  - gatsby-ssr.js
  - .all-contributorsrc

"translation :earth_africa:":
  - src/content/translations/**/*
  - src/intl/*
  - src/utils/translations.js
  updates:
  - package-ecosystem: 'npm'
    directory: '/'
    schedule:
      interval: 'daily'
    ignore:
# macOS
.DS_Store

# Editor
.vscode/
**/.idea

# mkdocs files
.cache/

# build
/build
/site
/utils

# test script
test.sh

# overrides
overrides/partials/*
!overrides/partials/content.html
!overrides/partials/footer.html
  # Generated by Cargo
# will have compiled files and executables
debug/
target/

# These are backup files generated by rustfmt
**/*.rs.bk

# Node.js dependency directory
node_modules/

# Generated files by Antora
build/
  name: CI

on:
  pull_request:
  push:
    branches:
      - "develop"
      - "master"
  schedule:
    - cron: "0 0 * * 0"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.70.0 # MSRV
          targets: ${{ matrix.target }}
      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2.7.1
        with:
          key: ${{ matrix.target }}
      - name: Run tests
        run: cargo test --target ${{ matrix.target }}
      - name: Run tests (no default features)
        run: cargo test --target ${{ matrix.target }} --no-default-features

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2.7.1
      - name: Check code formatted
        run: cargo fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2.7.1
      - name: Check no lint warnings
        run: cargo clippy -- -D warnings
      - name: Check no lint warnings (no default features)
        run: cargo clippy --no-default-features -- -D warnings

name: Deployment

on:
  push:
    branches:
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Install dependencies
        run: |
          npm ci
          npx antora -v
      - name: Setup just
        uses: extractions/setup-just@v1
      - name: Build a book
        run: just build-book
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.9.3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/site
            language: cpp

cache: ccache

matrix:
  fast_finish: true
  include:
    - os: linux
      dist: bionic
      addons:
        apt:
          packages:
            - build-essential
            - gcc-multilib
            - autoconf
            - automake
            - libtool
            - pkg-config
            - m4
            - zlib1g-dev
            - openssl
      env:
  "coverage_options": {
    "output_dir": "doc/"
  }


